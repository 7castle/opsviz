{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "",
    "Mappings": {
        "AWSNATAMI": {
            "ap-northeast-1": {
                "AMI": "ami-14d86d15"
            },
            "ap-southeast-1": {
                "AMI": "ami-02eb9350"
            },
            "eu-west-1": {
                "AMI": "ami-0b5b6c7f"
            },
            "sa-east-1": {
                "AMI": "ami-0439e619"
            },
            "us-east-1": {
                "AMI": "ami-c6699baf"
            },
            "us-west-1": {
                "AMI": "ami-3bcc9e7e"
            },
            "us-west-2": {
                "AMI": "ami-52ff7262"
            }
        },
        "SubnetConfig": {
            "Private": {
                "CIDR": "10.133.1.0/24"
            },
            "Public": {
                "CIDR": "10.133.0.0/24"
            },
            "VPC": {
                "CIDR": "10.133.0.0/16"
            }
        }
    },
    "Outputs": {
        "DashboardUrl": {
            "Value": {
                "Fn::GetAtt": [
                    "DashboardELB",
                    "DNSName"
                ]
            }
        },
        "PrivateSubnet": {
            "Value": {
                "Ref": "PrivateSubnet"
            }
        },
        "PublicSubnet": {
            "Value": {
                "Ref": "PublicSubnet"
            }
        },
        "StackId": {
            "Value": {
                "Ref": "OpsWorksStack"
            }
        },
        "VPC": {
            "Description": "VPC",
            "Value": {
                "Ref": "VPC"
            }
        }
    },
    "Parameters": {
        "BastionInstanceType": {
            "AllowedValues": [
                "t2.small",
                "t2.medium",
                "m3.medium"
            ],
            "Default": "m3.medium",
            "Description": "Enter t2.small, t2.medium, m3.medium. Default is t2.small.",
            "Type": "String"
        },
        "CookbooksRef": {
            "Default": "master",
            "Description": "The git reference to checkout for custom cookbooks",
            "Type": "String"
        },
        "CookbooksRepo": {
            "Description": "The github url for your custom cookbooks",
            "Type": "String"
        },
        "CookbooksSshKey": {
            "Default": "",
            "Description": "The ssh key needed to clone the cookbooks repo",
            "NoEcho": "true",
            "Type": "String"
        },
        "DashboardInstanceType": {
            "AllowedValues": [
                "m3.medium",
                "m3.large",
                "c3.large",
                "r3.large",
                "m3.2xlarge"
            ],
            "Default": "c3.large",
            "Description": "Enter m3.medium, m3.large, c3.large, or r3.large. Default is c3.large.",
            "Type": "String"
        },
        "DoormanEnable": {
            "AllowedValues": [
                "true",
                "false"
            ],
            "Default": "true",
            "Description": "Protect all internal resources through Doorman? If you are not deploying this privately through a VPN, this is recommended",
            "Type": "String"
        },
        "DoormanPassword": {
            "Default": "",
            "Description": "Password to use for alternate authentication through doorman. Leave empty for none",
            "Type": "String"
        },
        "DoormanSessionSecret": {
            "Default": "",
            "Description": "A Secret Salt used to encrypt cookies for doorman",
            "NoEcho": "true",
            "Type": "String"
        },
        "ElasticSearchInstanceType": {
            "AllowedValues": [
                "m3.medium",
                "m3.large",
                "c3.large",
                "r3.large"
            ],
            "Default": "r3.large",
            "Description": "Enter m3.medium, m3.large, c3.large, or r3.large. Default is r3.large.",
            "Type": "String"
        },
        "ElasticSearchVolumeSize": {
            "Default": 1000,
            "Description": "Size of disk in GB to use for elasticsearch ebs volumes",
            "MinValue": 20,
            "Type": "Number"
        },
        "GithubOauthAppId": {
            "Default": "",
            "Description": "Github Oauth App Id to use for doorman authentication. Leave empty for none.",
            "Type": "String"
        },
        "GithubOauthOrganization": {
            "Default": "",
            "Description": "Github Organization to allow through doorman",
            "Type": "String"
        },
        "GithubOauthSecret": {
            "Default": "",
            "Description": "Github Oauth App Secret to use for doorman authentication. Leave empty for none.",
            "NoEcho": "true",
            "Type": "String"
        },
        "GraphiteInstanceType": {
            "AllowedValues": [
                "m3.medium",
                "m3.large",
                "c3.large",
                "r3.large"
            ],
            "Default": "c3.large",
            "Description": "Enter m3.medium, m3.large, c3.large, or r3.large. Default is c3.large.",
            "Type": "String"
        },
        "GraphiteVolumeSize": {
            "Default": 100,
            "Description": "Size of disk in GB to use for graphite ebs volumes",
            "MinValue": 20,
            "Type": "Number"
        },
        "LogstashInstanceType": {
            "AllowedValues": [
                "m3.medium",
                "m3.large",
                "c3.large",
                "r3.large"
            ],
            "Default": "c3.large",
            "Description": "Enter m3.medium, m3.large, c3.large, or r3.large. Default is c3.large.",
            "Type": "String"
        },
        "OpsWorksStackColor": {
            "Default": "rgb(45, 114, 184)",
            "Description": "RGB Color to use for OpsWorks Stack",
            "Type": "String"
        },
        "PagerDutyAPIKey": {
            "Default": "",
            "Description": "The pagerduty api key if you want sensu alerts forwarded to pagerduty",
            "Type": "String"
        },
        "RabbitMQCertificateARN": {
            "Description": "ARN of hte certificate to use for rabbitmq",
            "Type": "String"
        },
        "RabbitMQErlangCookie": {
            "Description": "RabbitMQ Erlang Cookie. This should be unique per stack",
            "NoEcho": "true",
            "Type": "String"
        },
        "RabbitMQInstanceType": {
            "AllowedValues": [
                "m3.large",
                "c3.large",
                "r3.large"
            ],
            "Default": "r3.large",
            "Description": "Enter m3.large, c3.large, or r3.large. Default is r3.large.",
            "Type": "String"
        },
        "RabbitMQLogstashExternalPassword": {
            "Description": "RabbitMQ Password",
            "Type": "String"
        },
        "RabbitMQLogstashExternalUser": {
            "Default": "logstash_external",
            "Description": "RabbitMQ User",
            "Type": "String"
        },
        "RabbitMQLogstashInternalPassword": {
            "Description": "RabbitMQ Password",
            "Type": "String"
        },
        "RabbitMQLogstashInternalUser": {
            "Default": "logstash_internal",
            "Description": "RabbitMQ User",
            "Type": "String"
        },
        "RabbitMQPassword": {
            "Default": "hunter2",
            "Description": "RabbitMQ Password",
            "Type": "String"
        },
        "RabbitMQSensuPassword": {
            "Description": "RabbitMQ Sensu Password",
            "Type": "String"
        },
        "RabbitMQStatsdPassword": {
            "Description": "RabbitMQ Statsd Password",
            "Type": "String"
        },
        "RabbitMQUser": {
            "Default": "logger",
            "Description": "RabbitMQ User",
            "Type": "String"
        },
        "RabbitMQVolumeSize": {
            "Default": 20,
            "Description": "Size of disk in GB to use for elasticsearch ebs volumes",
            "MinValue": 20,
            "Type": "Number"
        },
        "Route53DomainName": {
            "Default": "",
            "Description": "The domain name to append to dns records",
            "Type": "String"
        },
        "Route53ZoneId": {
            "Default": "",
            "Description": "The zone id to add dns records to on instance setup. If empty updates won't happen",
            "Type": "String"
        },
        "Version": {
            "Default": "0.1",
            "Description": "Just a place holder for version",
            "Type": "String"
        }
    },
    "Resources": {
        "BastionInstance1": {
            "Properties": {
                "InstanceType": {
                    "Ref": "BastionInstanceType"
                },
                "LayerIds": [
                    {
                        "Ref": "OpsWorksBastionLayer"
                    }
                ],
                "StackId": {
                    "Ref": "OpsWorksStack"
                },
                "SubnetId": {
                    "Ref": "PublicSubnet"
                }
            },
            "Type": "AWS::OpsWorks::Instance"
        },
        "DashboardELB": {
            "Properties": {
                "HealthCheck": {
                    "HealthyThreshold": "3",
                    "Interval": "90",
                    "Target": "HTTP:80/",
                    "Timeout": "60",
                    "UnhealthyThreshold": "5"
                },
                "Listeners": [
                    {
                        "InstancePort": "80",
                        "LoadBalancerPort": "80",
                        "Protocol": "HTTP"
                    },
                    {
                        "InstancePort": "6379",
                        "LoadBalancerPort": "6379",
                        "Protocol": "TCP"
                    },
                    {
                        "InstancePort": "4567",
                        "LoadBalancerPort": "4567",
                        "Protocol": "TCP"
                    }
                ],
                "SecurityGroups": [
                    {
                        "Ref": "DashboardELBSecurityGroup"
                    },
                    {
                        "Ref": "InternalSecurityGroup"
                    }
                ],
                "Subnets": [
                    {
                        "Ref": "PublicSubnet"
                    }
                ]
            },
            "Type": "AWS::ElasticLoadBalancing::LoadBalancer"
        },
        "DashboardELBAttachment": {
            "Properties": {
                "ElasticLoadBalancerName": {
                    "Ref": "DashboardELB"
                },
                "LayerId": {
                    "Ref": "OpsWorksDashboardLayer"
                }
            },
            "Type": "AWS::OpsWorks::ElasticLoadBalancerAttachment"
        },
        "DashboardELBSecurityGroup": {
            "Properties": {
                "GroupDescription": "Allow inbound access to the ELB",
                "SecurityGroupEgress": [
                    {
                        "CidrIp": "0.0.0.0/0",
                        "FromPort": "80",
                        "IpProtocol": "tcp",
                        "ToPort": "80"
                    }
                ],
                "SecurityGroupIngress": [
                    {
                        "CidrIp": "0.0.0.0/0",
                        "FromPort": "80",
                        "IpProtocol": "tcp",
                        "ToPort": "80"
                    }
                ],
                "VpcId": {
                    "Ref": "VPC"
                }
            },
            "Type": "AWS::EC2::SecurityGroup"
        },
        "DashboardInstance1": {
            "DependsOn": [
                "RabbitMQInstance1",
                "GraphiteInstance1"
            ],
            "Properties": {
                "InstanceType": {
                    "Ref": "DashboardInstanceType"
                },
                "LayerIds": [
                    {
                        "Ref": "OpsWorksDashboardLayer"
                    }
                ],
                "StackId": {
                    "Ref": "OpsWorksStack"
                }
            },
            "Type": "AWS::OpsWorks::Instance"
        },
        "ElasticSearchELB": {
            "Properties": {
                "HealthCheck": {
                    "HealthyThreshold": "3",
                    "Interval": "90",
                    "Target": "TCP:9200",
                    "Timeout": "60",
                    "UnhealthyThreshold": "5"
                },
                "Listeners": [
                    {
                        "InstancePort": "9200",
                        "LoadBalancerPort": "9200",
                        "Protocol": "TCP"
                    },
                    {
                        "InstancePort": "9300",
                        "LoadBalancerPort": "9300",
                        "Protocol": "TCP"
                    }
                ],
                "Scheme": "internal",
                "SecurityGroups": [
                    {
                        "Ref": "InternalSecurityGroup"
                    }
                ],
                "Subnets": [
                    {
                        "Ref": "PrivateSubnet"
                    }
                ]
            },
            "Type": "AWS::ElasticLoadBalancing::LoadBalancer"
        },
        "ElasticSearchELBAttachment": {
            "Properties": {
                "ElasticLoadBalancerName": {
                    "Ref": "ElasticSearchELB"
                },
                "LayerId": {
                    "Ref": "OpsWorksElasticSearchLayer"
                }
            },
            "Type": "AWS::OpsWorks::ElasticLoadBalancerAttachment"
        },
        "ElasticSearchInstance1": {
            "Properties": {
                "InstanceType": {
                    "Ref": "ElasticSearchInstanceType"
                },
                "LayerIds": [
                    {
                        "Ref": "OpsWorksElasticSearchLayer"
                    }
                ],
                "StackId": {
                    "Ref": "OpsWorksStack"
                }
            },
            "Type": "AWS::OpsWorks::Instance"
        },
        "ElasticSearchInstance2": {
            "DependsOn": [
                "ElasticSearchInstance1"
            ],
            "Properties": {
                "InstanceType": {
                    "Ref": "ElasticSearchInstanceType"
                },
                "LayerIds": [
                    {
                        "Ref": "OpsWorksElasticSearchLayer"
                    }
                ],
                "StackId": {
                    "Ref": "OpsWorksStack"
                }
            },
            "Type": "AWS::OpsWorks::Instance"
        },
        "ElasticSearchInstance3": {
            "DependsOn": [
                "ElasticSearchInstance2"
            ],
            "Properties": {
                "InstanceType": {
                    "Ref": "ElasticSearchInstanceType"
                },
                "LayerIds": [
                    {
                        "Ref": "OpsWorksElasticSearchLayer"
                    }
                ],
                "StackId": {
                    "Ref": "OpsWorksStack"
                }
            },
            "Type": "AWS::OpsWorks::Instance"
        },
        "GraphiteELB": {
            "Properties": {
                "HealthCheck": {
                    "HealthyThreshold": "3",
                    "Interval": "90",
                    "Target": "TCP:2003",
                    "Timeout": "60",
                    "UnhealthyThreshold": "5"
                },
                "Listeners": [
                    {
                        "InstancePort": "8081",
                        "LoadBalancerPort": "8081",
                        "Protocol": "TCP"
                    },
                    {
                        "InstancePort": "2003",
                        "LoadBalancerPort": "2003",
                        "Protocol": "TCP"
                    }
                ],
                "Scheme": "internal",
                "SecurityGroups": [
                    {
                        "Ref": "InternalSecurityGroup"
                    }
                ],
                "Subnets": [
                    {
                        "Ref": "PrivateSubnet"
                    }
                ]
            },
            "Type": "AWS::ElasticLoadBalancing::LoadBalancer"
        },
        "GraphiteELBAttachment": {
            "Properties": {
                "ElasticLoadBalancerName": {
                    "Ref": "GraphiteELB"
                },
                "LayerId": {
                    "Ref": "OpsWorksGraphiteLayer"
                }
            },
            "Type": "AWS::OpsWorks::ElasticLoadBalancerAttachment"
        },
        "GraphiteInstance1": {
            "Properties": {
                "InstanceType": {
                    "Ref": "GraphiteInstanceType"
                },
                "LayerIds": [
                    {
                        "Ref": "OpsWorksGraphiteLayer"
                    }
                ],
                "StackId": {
                    "Ref": "OpsWorksStack"
                }
            },
            "Type": "AWS::OpsWorks::Instance"
        },
        "InboundEmphemeralPublicNetworkAclEntry": {
            "Properties": {
                "CidrBlock": "0.0.0.0/0",
                "Egress": "false",
                "NetworkAclId": {
                    "Ref": "PublicNetworkAcl"
                },
                "PortRange": {
                    "From": "1024",
                    "To": "65535"
                },
                "Protocol": "6",
                "RuleAction": "allow",
                "RuleNumber": "103"
            },
            "Type": "AWS::EC2::NetworkAclEntry"
        },
        "InboundHTTPPublicNetworkAclEntry": {
            "Properties": {
                "CidrBlock": "0.0.0.0/0",
                "Egress": "false",
                "NetworkAclId": {
                    "Ref": "PublicNetworkAcl"
                },
                "PortRange": {
                    "From": "80",
                    "To": "80"
                },
                "Protocol": "6",
                "RuleAction": "allow",
                "RuleNumber": "100"
            },
            "Type": "AWS::EC2::NetworkAclEntry"
        },
        "InboundHTTPSPublicNetworkAclEntry": {
            "Properties": {
                "CidrBlock": "0.0.0.0/0",
                "Egress": "false",
                "NetworkAclId": {
                    "Ref": "PublicNetworkAcl"
                },
                "PortRange": {
                    "From": "443",
                    "To": "443"
                },
                "Protocol": "6",
                "RuleAction": "allow",
                "RuleNumber": "101"
            },
            "Type": "AWS::EC2::NetworkAclEntry"
        },
        "InboundPrivateNetworkAclEntry": {
            "Properties": {
                "CidrBlock": "0.0.0.0/0",
                "Egress": "false",
                "NetworkAclId": {
                    "Ref": "PrivateNetworkAcl"
                },
                "PortRange": {
                    "From": "0",
                    "To": "65535"
                },
                "Protocol": "6",
                "RuleAction": "allow",
                "RuleNumber": "100"
            },
            "Type": "AWS::EC2::NetworkAclEntry"
        },
        "InboundSSHPublicNetworkAclEntry": {
            "Properties": {
                "CidrBlock": "0.0.0.0/0",
                "Egress": "false",
                "NetworkAclId": {
                    "Ref": "PublicNetworkAcl"
                },
                "PortRange": {
                    "From": "22",
                    "To": "22"
                },
                "Protocol": "6",
                "RuleAction": "allow",
                "RuleNumber": "102"
            },
            "Type": "AWS::EC2::NetworkAclEntry"
        },
        "InternalSecurityGroup": {
            "Properties": {
                "GroupDescription": "Allow VPC access to ports running on dashboard server",
                "SecurityGroupEgress": [
                    {
                        "CidrIp": "0.0.0.0/0",
                        "FromPort": "0",
                        "IpProtocol": "tcp",
                        "ToPort": "65535"
                    }
                ],
                "SecurityGroupIngress": [
                    {
                        "CidrIp": {
                            "Fn::FindInMap": [
                                "SubnetConfig",
                                "VPC",
                                "CIDR"
                            ]
                        },
                        "FromPort": "0",
                        "IpProtocol": "tcp",
                        "ToPort": "65535"
                    },
                    {
                        "FromPort": "0",
                        "IpProtocol": "tcp",
                        "SourceSecurityGroupId": {
                            "Ref": "DashboardELBSecurityGroup"
                        },
                        "ToPort": "65535"
                    },
                    {
                        "CidrIp": {
                            "Fn::Join": [
                                "",
                                [
                                    {
                                        "Ref": "NATIPAddress"
                                    },
                                    "/32"
                                ]
                            ]
                        },
                        "FromPort": "0",
                        "IpProtocol": "tcp",
                        "ToPort": "65535"
                    }
                ],
                "VpcId": {
                    "Ref": "VPC"
                }
            },
            "Type": "AWS::EC2::SecurityGroup"
        },
        "InternetGateway": {
            "Properties": {
                "Tags": [
                    {
                        "Key": "Application",
                        "Value": {
                            "Ref": "AWS::StackName"
                        }
                    },
                    {
                        "Key": "Network",
                        "Value": "Public"
                    }
                ]
            },
            "Type": "AWS::EC2::InternetGateway"
        },
        "LogstashInstance1": {
            "DependsOn": [
                "ElasticSearchInstance1",
                "ElasticSearchInstance2",
                "ElasticSearchInstance3",
                "RabbitMQInstance1"
            ],
            "Properties": {
                "InstanceType": {
                    "Ref": "LogstashInstanceType"
                },
                "LayerIds": [
                    {
                        "Ref": "OpsWorksLogstashLayer"
                    }
                ],
                "StackId": {
                    "Ref": "OpsWorksStack"
                }
            },
            "Type": "AWS::OpsWorks::Instance"
        },
        "NATDevice": {
            "Properties": {
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSNATAMI",
                        {
                            "Ref": "AWS::Region"
                        },
                        "AMI"
                    ]
                },
                "InstanceType": "m1.small",
                "SecurityGroupIds": [
                    {
                        "Ref": "NATSecurityGroup"
                    }
                ],
                "SourceDestCheck": "false",
                "SubnetId": {
                    "Ref": "PublicSubnet"
                }
            },
            "Type": "AWS::EC2::Instance"
        },
        "NATIPAddress": {
            "Properties": {
                "Domain": "vpc",
                "InstanceId": {
                    "Ref": "NATDevice"
                }
            },
            "Type": "AWS::EC2::EIP"
        },
        "NATSecurityGroup": {
            "Properties": {
                "GroupDescription": "Allow OpsWorks instances to access the NAT Device",
                "SecurityGroupEgress": [
                    {
                        "CidrIp": "0.0.0.0/0",
                        "FromPort": "0",
                        "IpProtocol": "tcp",
                        "ToPort": "65535"
                    }
                ],
                "SecurityGroupIngress": [
                    {
                        "FromPort": "80",
                        "IpProtocol": "tcp",
                        "SourceSecurityGroupId": {
                            "Ref": "OpsWorksSecurityGroup"
                        },
                        "ToPort": "80"
                    },
                    {
                        "FromPort": "9418",
                        "IpProtocol": "tcp",
                        "SourceSecurityGroupId": {
                            "Ref": "OpsWorksSecurityGroup"
                        },
                        "ToPort": "9418"
                    },
                    {
                        "FromPort": "443",
                        "IpProtocol": "tcp",
                        "SourceSecurityGroupId": {
                            "Ref": "OpsWorksSecurityGroup"
                        },
                        "ToPort": "443"
                    },
                    {
                        "CidrIp": {
                            "Fn::FindInMap": [
                                "SubnetConfig",
                                "VPC",
                                "CIDR"
                            ]
                        },
                        "FromPort": "0",
                        "IpProtocol": "tcp",
                        "ToPort": "65535"
                    }
                ],
                "VpcId": {
                    "Ref": "VPC"
                }
            },
            "Type": "AWS::EC2::SecurityGroup"
        },
        "OpsWorksBastionLayer": {
            "DependsOn": [
                "NATIPAddress",
                "PublicRoute",
                "PublicSubnetRouteTableAssociation",
                "PrivateRoute",
                "PrivateSubnetRouteTableAssociation"
            ],
            "Metadata": {
                "Comment": "Put the bastion layer inside of opsworks so the same users that have access to opsworks will have access to bastion."
            },
            "Properties": {
                "AutoAssignElasticIps": "true",
                "AutoAssignPublicIps": "false",
                "CustomRecipes": {
                    "Configure": [
                        "bb_monitor::sensu_client"
                    ],
                    "Deploy": [],
                    "Setup": [
                        "bb_monitor::route53",
                        "bb_monitor::logstash_agent"
                    ],
                    "Shutdown": [],
                    "Undeploy": []
                },
                "CustomSecurityGroupIds": [
                    {
                        "Ref": "OpsWorksSecurityGroup"
                    },
                    {
                        "Ref": "InternalSecurityGroup"
                    }
                ],
                "EnableAutoHealing": "true",
                "Name": "Bastion",
                "Shortname": "bastion",
                "StackId": {
                    "Ref": "OpsWorksStack"
                },
                "Type": "custom"
            },
            "Type": "AWS::OpsWorks::Layer"
        },
        "OpsWorksDashboardLayer": {
            "DependsOn": [
                "NATIPAddress",
                "PublicRoute",
                "PublicSubnetRouteTableAssociation",
                "PrivateRoute",
                "PrivateSubnetRouteTableAssociation"
            ],
            "Metadata": {
                "Comment": ""
            },
            "Properties": {
                "AutoAssignElasticIps": "false",
                "AutoAssignPublicIps": "false",
                "CustomRecipes": {
                    "Configure": [
                        "bb_monitor::sensu_client"
                    ],
                    "Deploy": [],
                    "Setup": [
                        "bb_monitor::kibana",
                        "bb_monitor::grafana",
                        "bb_monitor::sensu_server",
                        "bb_monitor::nginx",
                        "bb_monitor::route53",
                        "bb_monitor::logstash_agent"
                    ],
                    "Shutdown": [],
                    "Undeploy": []
                },
                "CustomSecurityGroupIds": [
                    {
                        "Ref": "OpsWorksSecurityGroup"
                    },
                    {
                        "Ref": "InternalSecurityGroup"
                    }
                ],
                "EnableAutoHealing": "true",
                "Name": "Dashboard",
                "Shortname": "dashboard",
                "StackId": {
                    "Ref": "OpsWorksStack"
                },
                "Type": "custom"
            },
            "Type": "AWS::OpsWorks::Layer"
        },
        "OpsWorksElasticSearchLayer": {
            "DependsOn": [
                "NATIPAddress",
                "PublicRoute",
                "PublicSubnetRouteTableAssociation",
                "PrivateRoute",
                "PrivateSubnetRouteTableAssociation"
            ],
            "Metadata": {
                "Comment": ""
            },
            "Properties": {
                "AutoAssignElasticIps": "false",
                "AutoAssignPublicIps": "false",
                "CustomRecipes": {
                    "Configure": [
                        "bb_monitor::sensu_client"
                    ],
                    "Deploy": [],
                    "Setup": [
                        "bb_elasticsearch",
                        "bb_monitor::route53",
                        "bb_monitor::logstash_agent"
                    ],
                    "Shutdown": [
                        "bb_monitor::sensu_client_remove"
                    ],
                    "Undeploy": []
                },
                "CustomSecurityGroupIds": [
                    {
                        "Ref": "OpsWorksSecurityGroup"
                    },
                    {
                        "Ref": "InternalSecurityGroup"
                    }
                ],
                "EnableAutoHealing": "true",
                "Name": "ElasticSearch",
                "Shortname": "elasticsearch",
                "StackId": {
                    "Ref": "OpsWorksStack"
                },
                "Type": "custom",
                "VolumeConfigurations": [
                    {
                        "MountPoint": "/usr/local/var",
                        "NumberOfDisks": 1,
                        "Size": {
                            "Ref": "ElasticSearchVolumeSize"
                        }
                    }
                ]
            },
            "Type": "AWS::OpsWorks::Layer"
        },
        "OpsWorksGraphiteLayer": {
            "DependsOn": [
                "NATIPAddress",
                "PublicRoute",
                "PublicSubnetRouteTableAssociation",
                "PrivateRoute",
                "PrivateSubnetRouteTableAssociation"
            ],
            "Metadata": {
                "Comment": ""
            },
            "Properties": {
                "AutoAssignElasticIps": "false",
                "AutoAssignPublicIps": "false",
                "CustomRecipes": {
                    "Configure": [
                        "bb_monitor::sensu_client"
                    ],
                    "Deploy": [],
                    "Setup": [
                        "bb_monitor::graphite",
                        "bb_monitor::route53",
                        "bb_monitor::logstash_agent"
                    ],
                    "Shutdown": [
                        "bb_monitor::sensu_client_remove"
                    ],
                    "Undeploy": []
                },
                "CustomSecurityGroupIds": [
                    {
                        "Ref": "OpsWorksSecurityGroup"
                    },
                    {
                        "Ref": "InternalSecurityGroup"
                    }
                ],
                "EnableAutoHealing": "true",
                "Name": "Graphite",
                "Shortname": "graphite",
                "StackId": {
                    "Ref": "OpsWorksStack"
                },
                "Type": "custom",
                "VolumeConfigurations": [
                    {
                        "MountPoint": "/opt/graphite/storage",
                        "NumberOfDisks": 1,
                        "Size": {
                            "Ref": "GraphiteVolumeSize"
                        }
                    }
                ]
            },
            "Type": "AWS::OpsWorks::Layer"
        },
        "OpsWorksInstanceProfile": {
            "Properties": {
                "Path": "/",
                "Roles": [
                    {
                        "Ref": "OpsWorksInstanceRole"
                    }
                ]
            },
            "Type": "AWS::IAM::InstanceProfile"
        },
        "OpsWorksInstanceRole": {
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Action": [
                                "sts:AssumeRole"
                            ],
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "ec2.amazonaws.com"
                                ]
                            }
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Action": [
                                        "ec2:CreateSnapshot",
                                        "ec2:CreateTags",
                                        "ec2:DeleteSnapshot",
                                        "ec2:Describe*"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": [
                                        "*"
                                    ]
                                }
                            ]
                        },
                        "PolicyName": "opsworks-instance-ec2"
                    },
                    {
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Action": [
                                        "opsworks:*",
                                        "ec2:DescribeKeyPairs",
                                        "ec2:DescribeSecurityGroups",
                                        "ec2:DescribeAccountAttributes",
                                        "ec2:DescribeAvailabilityZones",
                                        "ec2:DescribeSecurityGroups",
                                        "ec2:DescribeSubnets",
                                        "ec2:DescribeVpcs",
                                        "elasticloadbalancing:DescribeInstanceHealth",
                                        "elasticloadbalancing:DescribeLoadBalancers",
                                        "iam:GetRolePolicy",
                                        "iam:ListInstanceProfiles",
                                        "iam:ListRoles",
                                        "iam:ListUsers",
                                        "iam:PassRole"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": "*"
                                }
                            ]
                        },
                        "PolicyName": "opsworks-opsworks"
                    },
                    {
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Action": [
                                        "route53:*"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": [
                                        "*"
                                    ]
                                }
                            ]
                        },
                        "PolicyName": "opsworks-route53"
                    },
                    {
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Action": [
                                        "autoscaling:Describe*",
                                        "cloudwatch:Describe*",
                                        "cloudwatch:Get*",
                                        "cloudwatch:List*",
                                        "logs:Get*",
                                        "logs:Describe*",
                                        "logs:TestMetricFilter",
                                        "sns:Get*",
                                        "sns:List*"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": "*"
                                }
                            ]
                        },
                        "PolicyName": "opsworks-instance-cloudwatch"
                    },
                    {
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Action": [
                                        "elasticloadbalancing:DescribeInstanceHealth",
                                        "elasticloadbalancing:DescribeLoadBalancerAttributes",
                                        "elasticloadbalancing:DescribeLoadBalancerPolicyTypes",
                                        "elasticloadbalancing:DescribeLoadBalancerPolicies",
                                        "elasticloadbalancing:DescribeLoadBalancers",
                                        "elasticloadbalancing:DescribeTags"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": [
                                        "*"
                                    ]
                                }
                            ]
                        },
                        "PolicyName": "opsworks-instance-elb"
                    }
                ]
            },
            "Type": "AWS::IAM::Role"
        },
        "OpsWorksLogstashLayer": {
            "DependsOn": [
                "NATIPAddress",
                "PublicRoute",
                "PublicSubnetRouteTableAssociation",
                "PrivateRoute",
                "PrivateSubnetRouteTableAssociation"
            ],
            "Metadata": {
                "Comment": ""
            },
            "Properties": {
                "AutoAssignElasticIps": "false",
                "AutoAssignPublicIps": "false",
                "CustomRecipes": {
                    "Configure": [
                        "bb_monitor::sensu_client"
                    ],
                    "Deploy": [],
                    "Setup": [
                        "bb_monitor::route53",
                        "bb_monitor::logstash_server"
                    ],
                    "Shutdown": [
                        "bb_monitor::sensu_client_remove"
                    ],
                    "Undeploy": []
                },
                "CustomSecurityGroupIds": [
                    {
                        "Ref": "OpsWorksSecurityGroup"
                    },
                    {
                        "Ref": "InternalSecurityGroup"
                    }
                ],
                "EnableAutoHealing": "true",
                "Name": "Logstash",
                "Shortname": "logstash",
                "StackId": {
                    "Ref": "OpsWorksStack"
                },
                "Type": "custom"
            },
            "Type": "AWS::OpsWorks::Layer"
        },
        "OpsWorksRabbitMQLayer": {
            "DependsOn": [
                "NATIPAddress",
                "PublicRoute",
                "PublicSubnetRouteTableAssociation",
                "PrivateRoute",
                "PrivateSubnetRouteTableAssociation"
            ],
            "Metadata": {
                "Comment": ""
            },
            "Properties": {
                "AutoAssignElasticIps": "false",
                "AutoAssignPublicIps": "false",
                "CustomRecipes": {
                    "Configure": [
                        "bb_monitor::sensu_client"
                    ],
                    "Deploy": [],
                    "Setup": [
                        "rabbitmq_cluster",
                        "bb_monitor::route53",
                        "bb_monitor::logstash_agent"
                    ],
                    "Shutdown": [
                        "bb_monitor::sensu_client_remove"
                    ],
                    "Undeploy": []
                },
                "CustomSecurityGroupIds": [
                    {
                        "Ref": "OpsWorksSecurityGroup"
                    },
                    {
                        "Ref": "InternalSecurityGroup"
                    }
                ],
                "EnableAutoHealing": "true",
                "Name": "RabbitMQ",
                "Shortname": "rabbitmq",
                "StackId": {
                    "Ref": "OpsWorksStack"
                },
                "Type": "custom",
                "VolumeConfigurations": [
                    {
                        "MountPoint": "/var/lib/rabbitmq",
                        "NumberOfDisks": 1,
                        "Size": {
                            "Ref": "RabbitMQVolumeSize"
                        }
                    }
                ]
            },
            "Type": "AWS::OpsWorks::Layer"
        },
        "OpsWorksSecurityGroup": {
            "Properties": {
                "GroupDescription": "Allow inbound requests from the ELB to the OpsWorks instances",
                "SecurityGroupIngress": [
                    {
                        "FromPort": "80",
                        "IpProtocol": "tcp",
                        "SourceSecurityGroupId": {
                            "Ref": "DashboardELBSecurityGroup"
                        },
                        "ToPort": "80"
                    }
                ],
                "VpcId": {
                    "Ref": "VPC"
                }
            },
            "Type": "AWS::EC2::SecurityGroup"
        },
        "OpsWorksServiceRole": {
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Action": [
                                "sts:AssumeRole"
                            ],
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "opsworks.amazonaws.com"
                                ]
                            }
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Action": [
                                        "ec2:*",
                                        "iam:PassRole",
                                        "cloudwatch:GetMetricStatistics",
                                        "elasticloadbalancing:*"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": "*"
                                }
                            ]
                        },
                        "PolicyName": "opsworks-service"
                    }
                ]
            },
            "Type": "AWS::IAM::Role"
        },
        "OpsWorksStack": {
            "Properties": {
                "Attributes": {
                    "Color": {
                        "Ref": "OpsWorksStackColor"
                    }
                },
                "ChefConfiguration": {
                    "BerkshelfVersion": "3.1.3",
                    "ManageBerkshelf": true
                },
                "ConfigurationManager": {
                    "Name": "Chef",
                    "Version": "11.10"
                },
                "CustomCookbooksSource": {
                    "Revision": {
                        "Ref": "CookbooksRef"
                    },
                    "SshKey": {
                        "Ref": "CookbooksSshKey"
                    },
                    "Type": "git",
                    "Url": {
                        "Ref": "CookbooksRepo"
                    }
                },
                "CustomJson": {
                    "aws_region": {
                        "Ref": "AWS::Region"
                    },
                    "bb_monitor": {
                        "logstash": {
                            "rabbitmq": {
                                "password": {
                                    "Ref": "RabbitMQLogstashInternalPassword"
                                },
                                "server": {
                                    "Fn::GetAtt": [
                                        "RabbitMQELB",
                                        "DNSName"
                                    ]
                                }
                            },
                            "server": {
                                "elasticsearch_server": {
                                    "Fn::GetAtt": [
                                        "ElasticSearchELB",
                                        "DNSName"
                                    ]
                                },
                                "filters": [],
                                "statsd_output": {}
                            }
                        },
                        "sensu": {
                            "pagerduty_api": {
                                "Ref": "PagerDutyAPIKey"
                            },
                            "rabbitmq": {
                                "password": {
                                    "Ref": "RabbitMQSensuPassword"
                                },
                                "server": {
                                    "Fn::GetAtt": [
                                        "RabbitMQELB",
                                        "DNSName"
                                    ]
                                }
                            },
                            "server_url": {
                                "Fn::GetAtt": [
                                    "DashboardELB",
                                    "DNSName"
                                ]
                            }
                        }
                    },
                    "chef_environment": "production",
                    "doorman": {
                        "app_id": {
                            "Ref": "GithubOauthAppId"
                        },
                        "app_secret": {
                            "Ref": "GithubOauthSecret"
                        },
                        "org_name": {
                            "Ref": "GithubOauthOrganization"
                        },
                        "password": {
                            "Ref": "DoormanPassword"
                        },
                        "session_secret": {
                            "Ref": "DoormanSessionSecret"
                        }
                    },
                    "elasticsearch": {
                        "cloud": {
                            "aws": {
                                "region": {
                                    "Ref": "AWS::Region"
                                }
                            }
                        },
                        "cluster": {
                            "name": "logstash"
                        },
                        "discovery": {
                            "type": "ec2"
                        },
                        "http_auth": false,
                        "index.auto_expand_replicas": "2-all",
                        "index.number_of_replicas": 2,
                        "index.number_of_shards": 8,
                        "plugins": {
                            "elasticsearch/elasticsearch-cloud-aws": {
                                "version": "2.2.0"
                            }
                        },
                        "version": "1.0.1"
                    },
                    "graphite": {
                        "host": {
                            "Fn::GetAtt": [
                                "GraphiteELB",
                                "DNSName"
                            ]
                        }
                    },
                    "kibana": {
                        "elasticsearch_server": {
                            "Fn::GetAtt": [
                                "ElasticSearchELB",
                                "DNSName"
                            ]
                        },
                        "kibana3_version": "3.1.1",
                        "version": "3"
                    },
                    "rabbitmq": {
                        "cluster": true,
                        "erlang_cookie": {
                            "Ref": "RabbitMQErlangCookie"
                        }
                    },
                    "rabbitmq_cluster": {
                        "users": [
                            {
                                "password": {
                                    "Ref": "RabbitMQPassword"
                                },
                                "user": {
                                    "Ref": "RabbitMQUser"
                                }
                            },
                            {
                                "password": {
                                    "Ref": "RabbitMQLogstashExternalPassword"
                                },
                                "user": {
                                    "Ref": "RabbitMQLogstashExternalUser"
                                }
                            },
                            {
                                "password": {
                                    "Ref": "RabbitMQLogstashInternalPassword"
                                },
                                "user": {
                                    "Ref": "RabbitMQLogstashInternalUser"
                                }
                            }
                        ]
                    },
                    "route53": {
                        "domain_name": {
                            "Ref": "Route53DomainName"
                        },
                        "zone_id": {
                            "Ref": "Route53ZoneId"
                        }
                    },
                    "statsd": {
                        "graphite_host": {
                            "Fn::GetAtt": [
                                "GraphiteELB",
                                "DNSName"
                            ]
                        },
                        "nodejs_bin": "/usr/local/bin/node",
                        "rabbitmq": {
                            "password": {
                                "Ref": "RabbitMQStatsdPassword"
                            },
                            "user": "statsd",
                            "vhost": "/statsd"
                        }
                    }
                },
                "DefaultInstanceProfileArn": {
                    "Fn::GetAtt": [
                        "OpsWorksInstanceProfile",
                        "Arn"
                    ]
                },
                "DefaultOs": "Ubuntu 14.04 LTS",
                "DefaultSubnetId": {
                    "Ref": "PrivateSubnet"
                },
                "Name": {
                    "Ref": "AWS::StackName"
                },
                "ServiceRoleArn": {
                    "Fn::GetAtt": [
                        "OpsWorksServiceRole",
                        "Arn"
                    ]
                },
                "UseCustomCookbooks": true,
                "VpcId": {
                    "Ref": "VPC"
                }
            },
            "Type": "AWS::OpsWorks::Stack"
        },
        "OutBoundPrivateNetworkAclEntry": {
            "Properties": {
                "CidrBlock": "0.0.0.0/0",
                "Egress": "true",
                "NetworkAclId": {
                    "Ref": "PrivateNetworkAcl"
                },
                "PortRange": {
                    "From": "0",
                    "To": "65535"
                },
                "Protocol": "6",
                "RuleAction": "allow",
                "RuleNumber": "100"
            },
            "Type": "AWS::EC2::NetworkAclEntry"
        },
        "OutboundPublicNetworkAclEntry": {
            "Properties": {
                "CidrBlock": "0.0.0.0/0",
                "Egress": "true",
                "NetworkAclId": {
                    "Ref": "PublicNetworkAcl"
                },
                "PortRange": {
                    "From": "0",
                    "To": "65535"
                },
                "Protocol": "6",
                "RuleAction": "allow",
                "RuleNumber": "100"
            },
            "Type": "AWS::EC2::NetworkAclEntry"
        },
        "PrivateNetworkAcl": {
            "Properties": {
                "Tags": [
                    {
                        "Key": "Application",
                        "Value": {
                            "Ref": "AWS::StackName"
                        }
                    },
                    {
                        "Key": "Network",
                        "Value": "Private"
                    }
                ],
                "VpcId": {
                    "Ref": "VPC"
                }
            },
            "Type": "AWS::EC2::NetworkAcl"
        },
        "PrivateRoute": {
            "Properties": {
                "DestinationCidrBlock": "0.0.0.0/0",
                "InstanceId": {
                    "Ref": "NATDevice"
                },
                "RouteTableId": {
                    "Ref": "PrivateRouteTable"
                }
            },
            "Type": "AWS::EC2::Route"
        },
        "PrivateRouteTable": {
            "Properties": {
                "Tags": [
                    {
                        "Key": "Application",
                        "Value": {
                            "Ref": "AWS::StackName"
                        }
                    },
                    {
                        "Key": "Network",
                        "Value": "Private"
                    }
                ],
                "VpcId": {
                    "Ref": "VPC"
                }
            },
            "Type": "AWS::EC2::RouteTable"
        },
        "PrivateSubnet": {
            "Properties": {
                "AvailabilityZone": {
                    "Fn::Select": [
                        "0",
                        {
                            "Fn::GetAZs": {
                                "Ref": "AWS::Region"
                            }
                        }
                    ]
                },
                "CidrBlock": {
                    "Fn::FindInMap": [
                        "SubnetConfig",
                        "Private",
                        "CIDR"
                    ]
                },
                "Tags": [
                    {
                        "Key": "Application",
                        "Value": {
                            "Ref": "AWS::StackName"
                        }
                    },
                    {
                        "Key": "Name",
                        "Value": "Private"
                    }
                ],
                "VpcId": {
                    "Ref": "VPC"
                }
            },
            "Type": "AWS::EC2::Subnet"
        },
        "PrivateSubnetNetworkAclAssociation": {
            "Properties": {
                "NetworkAclId": {
                    "Ref": "PrivateNetworkAcl"
                },
                "SubnetId": {
                    "Ref": "PrivateSubnet"
                }
            },
            "Type": "AWS::EC2::SubnetNetworkAclAssociation"
        },
        "PrivateSubnetRouteTableAssociation": {
            "Properties": {
                "RouteTableId": {
                    "Ref": "PrivateRouteTable"
                },
                "SubnetId": {
                    "Ref": "PrivateSubnet"
                }
            },
            "Type": "AWS::EC2::SubnetRouteTableAssociation"
        },
        "PublicNetworkAcl": {
            "Properties": {
                "Tags": [
                    {
                        "Key": "Application",
                        "Value": {
                            "Ref": "AWS::StackName"
                        }
                    },
                    {
                        "Key": "Network",
                        "Value": "Public"
                    }
                ],
                "VpcId": {
                    "Ref": "VPC"
                }
            },
            "Type": "AWS::EC2::NetworkAcl"
        },
        "PublicRoute": {
            "DependsOn": "VPCGatewayAttachment",
            "Properties": {
                "DestinationCidrBlock": "0.0.0.0/0",
                "GatewayId": {
                    "Ref": "InternetGateway"
                },
                "RouteTableId": {
                    "Ref": "PublicRouteTable"
                }
            },
            "Type": "AWS::EC2::Route"
        },
        "PublicRouteTable": {
            "Properties": {
                "Tags": [
                    {
                        "Key": "Application",
                        "Value": {
                            "Ref": "AWS::StackName"
                        }
                    },
                    {
                        "Key": "Network",
                        "Value": "Public"
                    }
                ],
                "VpcId": {
                    "Ref": "VPC"
                }
            },
            "Type": "AWS::EC2::RouteTable"
        },
        "PublicSubnet": {
            "Properties": {
                "AvailabilityZone": {
                    "Fn::Select": [
                        "0",
                        {
                            "Fn::GetAZs": {
                                "Ref": "AWS::Region"
                            }
                        }
                    ]
                },
                "CidrBlock": {
                    "Fn::FindInMap": [
                        "SubnetConfig",
                        "Public",
                        "CIDR"
                    ]
                },
                "Tags": [
                    {
                        "Key": "Application",
                        "Value": {
                            "Ref": "AWS::StackName"
                        }
                    },
                    {
                        "Key": "Network",
                        "Value": "Public"
                    }
                ],
                "VpcId": {
                    "Ref": "VPC"
                }
            },
            "Type": "AWS::EC2::Subnet"
        },
        "PublicSubnetNetworkAclAssociation": {
            "Properties": {
                "NetworkAclId": {
                    "Ref": "PublicNetworkAcl"
                },
                "SubnetId": {
                    "Ref": "PublicSubnet"
                }
            },
            "Type": "AWS::EC2::SubnetNetworkAclAssociation"
        },
        "PublicSubnetRouteTableAssociation": {
            "Properties": {
                "RouteTableId": {
                    "Ref": "PublicRouteTable"
                },
                "SubnetId": {
                    "Ref": "PublicSubnet"
                }
            },
            "Type": "AWS::EC2::SubnetRouteTableAssociation"
        },
        "RabbitMQELB": {
            "Properties": {
                "HealthCheck": {
                    "HealthyThreshold": "3",
                    "Interval": "90",
                    "Target": "TCP:5672",
                    "Timeout": "60",
                    "UnhealthyThreshold": "5"
                },
                "Listeners": [
                    {
                        "InstancePort": "5672",
                        "LoadBalancerPort": "5672",
                        "Protocol": "TCP"
                    },
                    {
                        "InstancePort": "15672",
                        "LoadBalancerPort": "15672",
                        "Protocol": "TCP"
                    },
                    {
                        "InstancePort": "5672",
                        "LoadBalancerPort": "5671",
                        "Protocol": "SSL",
                        "SSLCertificateId": {
                            "Ref": "RabbitMQCertificateARN"
                        }
                    }
                ],
                "SecurityGroups": [
                    {
                        "Ref": "RabbitMQELBSecurityGroup"
                    },
                    {
                        "Ref": "InternalSecurityGroup"
                    }
                ],
                "Subnets": [
                    {
                        "Ref": "PublicSubnet"
                    }
                ]
            },
            "Type": "AWS::ElasticLoadBalancing::LoadBalancer"
        },
        "RabbitMQELBAttachment": {
            "Properties": {
                "ElasticLoadBalancerName": {
                    "Ref": "RabbitMQELB"
                },
                "LayerId": {
                    "Ref": "OpsWorksRabbitMQLayer"
                }
            },
            "Type": "AWS::OpsWorks::ElasticLoadBalancerAttachment"
        },
        "RabbitMQELBSecurityGroup": {
            "Properties": {
                "GroupDescription": "Allow inbound access to the ELB",
                "SecurityGroupEgress": [
                    {
                        "CidrIp": "0.0.0.0/0",
                        "FromPort": "5671",
                        "IpProtocol": "tcp",
                        "ToPort": "5671"
                    }
                ],
                "SecurityGroupIngress": [
                    {
                        "CidrIp": "0.0.0.0/0",
                        "FromPort": "5671",
                        "IpProtocol": "tcp",
                        "ToPort": "5671"
                    }
                ],
                "VpcId": {
                    "Ref": "VPC"
                }
            },
            "Type": "AWS::EC2::SecurityGroup"
        },
        "RabbitMQInstance1": {
            "Properties": {
                "InstanceType": {
                    "Ref": "RabbitMQInstanceType"
                },
                "LayerIds": [
                    {
                        "Ref": "OpsWorksRabbitMQLayer"
                    }
                ],
                "StackId": {
                    "Ref": "OpsWorksStack"
                }
            },
            "Type": "AWS::OpsWorks::Instance"
        },
        "VPC": {
            "DependsOn": "OpsWorksServiceRole",
            "Properties": {
                "CidrBlock": {
                    "Fn::FindInMap": [
                        "SubnetConfig",
                        "VPC",
                        "CIDR"
                    ]
                },
                "Tags": [
                    {
                        "Key": "Application",
                        "Value": {
                            "Ref": "AWS::StackName"
                        }
                    },
                    {
                        "Key": "Network",
                        "Value": "Public"
                    }
                ]
            },
            "Type": "AWS::EC2::VPC"
        },
        "VPCGatewayAttachment": {
            "Properties": {
                "InternetGatewayId": {
                    "Ref": "InternetGateway"
                },
                "VpcId": {
                    "Ref": "VPC"
                }
            },
            "Type": "AWS::EC2::VPCGatewayAttachment"
        }
    }
}
